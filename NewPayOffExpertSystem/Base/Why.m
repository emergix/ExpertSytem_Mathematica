(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



How[attname_,instancename_]:=Module[{instance=InstanceFromInstanceName[instancename],att=LookUpAttribute[attname],SREEvent,rule},
SREEvent=lookUpSREEvent[instance,att];
If[SREEvent==0,False(* other type of conclusion *),
rule=SRERule[SREEvent];
Print[" ->BackwardRule ",BRName[rule], " concluded  " , attname ,"[",instancename,"]","=",IAConcludedValue[InstanceAttributeValue[instance,att]]];
]]


InstanceFromInstanceName[instancename_]:=Module[{pos1=StringPosition[instancename,"<"],classname,instancenb,class},
If[Length[pos1]==0,Print[" InstanceFromInstanceName : not an instance name : ",instancename];False,
classname=StringTake[instancename,pos1[[1,1]]-1];
instancenb=ToExpression[StringTake[instancename,{pos1[[1,1]]+1,StringLength[instancename]-1}]];
class=LookUpClass[classname];
If[instancenb>Length[CLInstanceList[class]],Print[" InstanceFromInstanceName : instance number greater than the actual number of instance of ",classname];False,CLInstanceList[class][[instancenb]]]]]



InstanceNameFromInstance[instance_]:=StringJoin[CLName[INSClass[instance]],"<",
		ToString[Position[CLInstanceList[INSClass[instance]],instance][[1,1]]],">"]


lookUpSREEvent[instance_,att_]:=Module[{pos=Position[Range[SucceededRuleEventNb],_?((SREInstance[#]==instance) && (SREAttribute[#]==att)&)]},
If[Length[pos]==0,0,pos[[1,1]]]]



