(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Unprotect[Value];
Value[instance_,attname_]:=Module[{v,status,insatt=InstanceAttributeValue[instance,LookUpAttribute[attname]]},status=Catch[V[instance,attname]];
	If[IAConcluded[insatt]==True,IAConcludedValue[insatt],Print["Unable to conclude : ",attname,"[",InstanceNameFromInstance[instance],
		"]"];{}]];
Protect[Value];


V[instance_,attname_]:=AttributeValue[instance,attname]


AskUser[att_]:=Module[{a,s,i,lv=ATTLegalValues[att]},
If[Length[lv]!=0,If[Length[lv]<8,
	s=Apply[StringJoin,
		Table[StringJoin["\n",ToString[i],"-->",lv[[i]]],{i,1,Length[lv]}]],
	s=Apply[StringJoin,
		Table[StringJoin[" |> ",ToString[i],"->",lv[[i]]],{i,1,Length[lv]}]]];
a=Input[StringJoin[ATTQuestion[att],"\n here are the choices :",s]];
If[a>Length[lv],AskUser[att],lv[[a]]],
	If[ATTType[att]=="String",InputString[ATTQuestion[att]],Input[ATTQuestion[att]]]]]


AttributeValue[instance_,attname_]:=Module[{att=LookUpAttribute[attname],rep,insatt},
insatt=InstanceAttributeValue[instance,att];
If[NumberQ[insatt]==False,
	insatt=AddInstanciedAttribute[INSClass[instance],instance,att]]; (* pas forcement necessaire *)
If[IAConcluded[insatt]==True,If[TraceReasoning1==True,
	Print["accessing the value of \"",attname,"[",InstanceNameFromInstance[instance],"]"]];IAConcludedValue[insatt],
If[TraceReasoning1==True,
	Print["Trying to get the value of \"",attname,"[",InstanceNameFromInstance[instance],"]"]];
    If[TryToConcludeByRuleAttribute[insatt]==True,IAConcludedValue[insatt],
	If[ATTQuestion[att]==0,
Print["$$$ :",attname,"  throw False 1!"];
Throw[False],(* ATTQuestion[att]==0 when you do not want a question being asked *)
	rep=AskUser[att];
	If[rep=="Unknown",Print["$$$ :",attname,"  throw False 2!"];Throw[False]];
	IAConcluded[insatt]=True;
	IAConcludedByQuestion[insatt]=True;
	If[TraceReasoning==True,
	Print["*** ",attname,"[",InstanceNameFromInstance[instance],
		"]  concluded by question = ",rep]];
	IAConcludedValue[insatt]=rep
		]]]]


Known[instance_,attname_]:=Module[{att=LookUpAttribute[attname],rep,aa},
insatt=InstanceAttributeValue[instance,att];
If[NumberQ[insatt]==False,
	insatt=AddInstanciedAttribute[INSClass[instance],instance,att]]; (* pas forcement necessaire mais pour plus tard avoir deux types d'attribut dont un qui ne cree pas des instancied attribute tous de suite parce que il y en aurait trop*)
	If[IAConcluded[insatt]==True, If[TraceReasoning1==True,Print["accessing the value of \"",attname,
		"[",InstanceNameFromInstance[instance],"]"]];True, If[TraceReasoning1==True,Print["Trying to get the value of \"",attname,
		"[",InstanceNameFromInstance[instance],"]"]];
	If[(aa=TryToConcludeByRuleAttribute[insatt])==True,True,
	If[ATTQuestion[att]==0,Print["$$$ :",attname,"  throw False 3!"];Throw[False],
(* ATTQuestion[att]==0 when you do not want a question being asked *)
	rep=AskUser[att];
	If[rep=="Unknown",Print["$$$ :",attname,"  throw False 4!"];Throw[False]];
	IAConcluded[insatt]=True;
	IAConcludedByQuestion[insatt]=True;
	If[TraceReasoning==True,Print["*** ",attname,"[",InstanceNameFromInstance[instance],"]  concluded by question = ",rep]];
	IAConcludedValue[insatt]=rep;True
		]]]]


TryToConcludeByRuleAttribute[insatt_]:=Module[{att=IAAttribute[insatt],attlist,nbrule,i=1,sym,aa},
attlist=ATTRules[att];
nbrule=Length[attlist];
If[TraceReasoning==True,
		Print["--- trying to conclude by rule : ",ATTName[att],"[",InstanceNameFromInstance[IAInstance[insatt]],"]"]];
If[TraceReasoning==True,
		Print["--- Rule that will be tried : ",Map[BRName,attlist]]];
While[(IAConcluded[insatt]==False)&&(i<=nbrule)&&((aa=TryToFireRule[attlist[[i]],IAInstance[insatt],insatt]);aa==False),i++];
If[i>nbrule,False,IAConcluded[insatt]]]


TryToFireRule[rule_,instance_,insatt_]:=Module[{pr,aa},
If[TraceReasoning==True,Print["--- trying to fire : ",BRName[rule]]]; 
pr=BRPremisse[rule] /. CurrentInstance->instance;
	Catch[If[(aa=Evaluate[pr[[1]]];If[aa,True,False,Print["Premisse not evaluable: Rule : ",BRName[rule]]];aa)==True, (* this catches the premisses fails *)
			If[TraceReasoning==True,Print["Premisse of ",BRName[rule],":",pr," ->True"]];
			ConcludeConclusionRule[rule,instance,insatt];(* searchedattlist should be determined! *)
	True,If[TraceReasoning==True,Print["Failed ! :  premisse, aa=",aa,"   ",BRName[rule]]];
False]]]


ConcludeConclusionRule[rule_,instance_,insatt_]:=
	Module[{val,con},
con=BRConclusion[rule] /.CurrentInstance->instance; 
	If[TraceReasoning==True,Print["***++ ",BRName[rule],"  succeeded !"]];
	val=Evaluate[con[[1]]];
	IAConcludedValue[insatt]=val;
	If[TraceReasoning==True,Print["*** ",ATTName[IAAttribute[insatt]],"[",InstanceNameFromInstance[IAInstance[insatt]],"]","  concluded by rule = ",val]];
	AddSucceededRuleEvent[rule, instance,IAAttribute[insatt],"Rule Goal"];
	IAConcludedByBackchaining[insatt]=True;
	IAConcluded[insatt]=True]


Conclude[instance_,attname_,value_]:=ConcludeInstanceAttributeValue[instance,attname,value]


ConcludeInstanceAttributeValue[instance_,attname_,value_]:=Module[{att=LookUpAttribute[attname],insatt},
If[TraceReasoning==True,Print["+++++concluding",attname,"[",InstanceNameFromInstance,"]"]];
	insatt=InstanceAttributeValue[instance,att];
	If[NumberQ[insatt]==False,
		insatt=AddInstanciedAttribute[INSClass[instance],instance,att]]; (* pas forcement necessaire *)
	IAConcludedValue[insatt]=value;
	IAConcluded[insatt]=True;
	IAConcludedDirectly[insatt]=True;
	If[TraceReasoning==True,Print["*** ",ATTName[IAatt[insatt]],"[",InstanceNameFromInstance[IAInstance[insatt]],"]","  concluded directly = ",value]];
	]


BelongTo[elem_,list_]:=MemberQ[list,elem]
