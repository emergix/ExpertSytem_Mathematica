(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



Unprotect[CDF,PDF]


SetDirectory["/Users/oliviercroissant/Documents/Math/ExpertSystem/NewExpertSystem"];
<<"Creations.m";
<<"InferenceEngine.m";
<<"DisplayFunctions.m";
<<"Why.m";
<<"ScenariosCreation.m";
<<"TreeGeneration.m";
(<<"ErrorBarPlots`";<<"PlotLegends`");


RunThroughTree[tree_,func_]:=Module[{nbstage=Length[tree],k,i,j,nbpath,path,LastCol,Lastelem,currentelem,iscen=0},
LastCol=tree[[nbstage]];
Do[Do[
	Lastelem=LastCol[[i,j]];
path=Table[Lastelem,{k,1,nbstage}];
iscen+=1;
currentelem=Lastelem;
Do[
preceelem=Select[Flatten[tree[[k]],1],(#[[1]]==currentelem[[4]])&][[1]];
	path[[k]]=preceelem;
currentelem=preceelem;
,{k,nbstage-1,1,-1}];
Apply[func,{path,iscen}];
,{j,1,Length[LastCol[[i]]]}],{i,1,Length[LastCol]}];
]


WriteScenario[stream_,path_, ScenarioSetName_,RootName_,ScenModel_,CurveShiftModelSet_,iscen_,timestartlist_,ScenReplacValueFuncSet_]:=Module[{i,string,nattributes=Length[ScenModel]+Length[CurveShiftModelSet[[1]]]+2,inistring="",m},
Do[inistring=inistring<>",",{l,1,nattributes}];
	Do[Do[
ScenReplacValueFunc=ScenReplacValueFuncSet[[m]];
If[iscen==1&&i==1&&m==1,
WriteString[stream,","<>ScenarioSetName<>","<>RootName<>ToString[iscen]<>","];
Map[(WriteString[stream,ToString[#[[2]]]<>","])&,ScenModel];
Map[(WriteString[stream,ToString[Apply[#[[2]],{timestartlist[[i]]}]]<>","])&,CurveShiftModelSet[[m]]];
listofvalues=Apply[ScenReplacValueFunc,{timestartlist[[i]],path[[i,3,m]]}];
Do[WriteString[stream,ToString[listofvalues[[1,k]]]<>","],{k,1,Length[listofvalues[[1]]]-1}];
WriteString[stream,ToString[listofvalues[[1,Length[listofvalues[[1]]]]]]];
Do[WriteString[stream,"\n"];
string=inistring;
Do[string=string<>","<>ToString[listofvalues[[l,k]]],{k,1,Length[listofvalues[[l]]]}];
WriteString[stream,string]
,{l,2,Length[listofvalues]}];
WriteString[stream,"\n"],
If[i==1&&m==1,
WriteString[stream,",,"<>RootName<>ToString[iscen]<>","];
Map[(WriteString[stream,ToString[#[[2]]]<>","])&,ScenModel];
Map[(WriteString[stream,ToString[Apply[#[[2]],{timestartlist[[i]]}]]<>","])&,CurveShiftModelSet[[m]]];
listofvalues=Apply[ScenReplacValueFunc,{timestartlist[[i]],path[[i,3,m]]}];
Do[WriteString[stream,ToString[listofvalues[[1,k]]]<>","],{k,1,Length[listofvalues[[1]]]-1}];
WriteString[stream,ToString[listofvalues[[1,Length[listofvalues[[1]]]]]]];
Do[WriteString[stream,"\n"];
string=inistring;
Do[string=string<>","<>ToString[listofvalues[[l,k]]],{k,1,Length[listofvalues[[l]]]}];
WriteString[stream,string]
,{l,2,Length[listofvalues]}];
WriteString[stream,"\n"],
WriteString[stream,",,,"];
Map[(WriteString[stream,","])&,ScenModel];
Map[(WriteString[stream,ToString[Apply[#[[2]],{timestartlist[[i]]}]]<>","])&,CurveShiftModelSet[[m]]];
listofvalues=Apply[ScenReplacValueFunc,{timestartlist[[i]],path[[i,3,m]]}];
Do[WriteString[stream,ToString[listofvalues[[1,k]]]<>","],{k,1,Length[listofvalues[[1]]]-1}];
WriteString[stream,ToString[listofvalues[[1,Length[listofvalues[[1]]]]]]];
Do[WriteString[stream,"\n"];
string=inistring;
Do[string=string<>","<>ToString[listofvalues[[l,k]]],{k,1,Length[listofvalues[[l]]]}];
WriteString[stream,string]
,{l,2,Length[listofvalues]}];
WriteString[stream,"\n"]]]
,{m,1,Length[ScenReplacValueFuncSet]}];
,{i,1,Length[path]}]
]


MakeCSVfromTree[tree_,filename_, ScenarioSetName_,RootName_,ScenModel_,CurveShiftModelSet_,timestartlist_,ScenReplacValueFuncSet_]:=Module[{stream},
stream=OpenWrite[filename];
WriteString[stream,"Scenario Set,Scenario Set Name,Scenario Name,"];
Map[(WriteString[stream,#[[1]]<>","])&,ScenModel];
Map[(WriteString[stream,#[[1]]<>","])&,CurveShiftModelSet[[1]]];
WriteString[stream,"Scenario Replacement Value,"];
WriteString[stream,"\n"];
RunThroughTree[tree,(WriteScenario[stream,#1, ScenarioSetName,RootName,ScenModel,CurveShiftModelSet,#2,timestartlist,ScenReplacValueFuncSet])&];
Close[stream];]



WriteNodeInfo[stream_,path_]:=Module[{i},
Do[WriteString[stream,ToString[Floor[path[[i]][[1]]]]<>" "];,{i,1,Length[path]}];
WriteString[stream,"\n"];]


MakeNPMfromTree[tree_,filename_]:=Module[{stream},
Print["writing : ",filename];
stream=OpenWrite[filename];
WriteString[stream,ToString[Length[Flatten[tree[[Length[tree]]],1]]]<>"\n"];
WriteString[stream,ToString[Length[tree]]<>"\n"];
RunThroughTree[tree,(WriteNodeInfo[stream,#1])&];
Close[stream];]




GenerateTreeForRiskwatch[tree1_,FilenameRoot_,ScenarioSetName_,timestepslist_,variablenames_]:=Module[{x,tree},
If[Length[variablenames]==0,
MakeCSVfromTree[tree1, FilenameRoot<>".csv",ScenarioSetName,"scen",
	{{"Scenario Probability",1},{"Scenario Color","red"}},{{{"Scenario Variable",variablenames&},{"Scenario Start Time",#&},{"Scenario Attribute",""&},{"Time Evolution","@Sliding Axis 1"&},{"Time Evolution To Trigger","@Sliding Axis 2"&},{"Trigger Holder","@Standard()"&},{"Scenario Shift Rule","Trigger Time"&},{"Scenario Type","absolute"&}}},timestepslist,{{{"Term",#1},{0,#2}}&}],
MakeCSVfromTree[tree1, FilenameRoot<>".csv",ScenarioSetName,"scen",
	{{"Scenario Probability",1},{"Scenario Color","red"}},Map[Function[vname,{{"Scenario Variable",vname&},{"Scenario Start Time",#&},{"Scenario Attribute",""&},{"Time Evolution","@Sliding Axis 1"&},{"Time Evolution To Trigger","@Sliding Axis 2"&},{"Trigger Holder","@Standard()"&},{"Scenario Shift Rule","Trigger Time"&},{"Scenario Type","absolute"&}}],variablenames],timestepslist,Map[Function[vname,{{"Term",#1},{0,#2}}&],variablenames]]];
MakeNPMfromTree[tree1, ScenarioSetName<>".npm"];
MakeNPMfromTree[tree1, FilenameRoot<>".npm"]]


EquityIndexCreationMakeCSVFile01[ stream_,indexname_,date_,value_,currency_,CurveFunction_,CurveFunctionArguments_]:=Module[{},
WriteString[stream,"Index Curve,ID,Name,Datum,Relative Curve,State Procedure,Procedure Parameter,Curve Function,Function parameters,Time Evolution,Time Interpolation,Term Interpolation,Curve Unit,RiskMetrics Link,Surface\n"];
WriteString[stream,",,"<>indexname<>","<>ToString[date]<>",False,,",CurveFunctionArguments,",",CurveFunction,",,slidingaxis 2,Constant,Linear,"<>currency<>","<>currency<>"-Equity,Term,0\n"];
WriteString[stream,",,,,,,,,,,,,,,0,"<>ToString[value]<>"\n"];
]



EquityIndexCreationMakeCSVFile[filename_,IndexList_]:=Module[{stream},
stream=OpenWrite[filename];
Map[Apply[EquityIndexCreationMakeCSVFile01,Prepend[#,stream]]&,IndexList];
Close[stream];]



(*NbLinesToDrop:number of lines to drop before the begining of the data,ncol_:number of column to read*)
ReadCSVFile2[file_,NbLinesToDrop_,nprice_]:=Module[{a,b,c,d,i,j,ncol},a=ReadList[file,Record];
b=Drop[a,NbLinesToDrop];
ncol=1+nprice*4;
c=Table[ReadList[StringToStream[b[[i]]],Word,WordSeparators->","],{i,1,Length[b]}];
d=Table[Table[0,{j,1,ncol}],{i,1,Length[c]}];
Do[(*Print[c[[i]][[1]],"==",c[[i]][[2]],"==",c[[i]][[3]]];*)
d[[i,1]]=DD[c[[i]][[1]]];
Do[If[Catch[d[[i,4j+2]]=DD[c[[i]][[4j+2]]];
d[[i,4j+3]]=DD[c[[i]][[4j+3]]]; d[[i,4j+4]]=ToExpression[c[[i]][[4j+4]]];
d[[i,4j+5]]=ToExpression[StringDrop[c[[i]][[4j+5]],1]];
0]!=0,Print["line=",i," serie=",j,"record=",c[[i]][[4j+2]],"*",c[[i]][[4j+3]],"*",c[[i]][[4j+4]],"*",c[[i]][[5]]]],{j,0,nprice-1}],{i,1,Length[b]}];
d]


ReadInSampleFile[filename_]:=Module[{i=0,a,b,c,Scenname,NewList,result={}},
a=OpenRead[filename];
While[((b=Read[a,Record,RecordSeparators->{"\n"}])=!= EndOfFile),
c=ReadList[StringToStream[b],Word,WordSeparators->{","}];i++;
If[Length[c]==13,
		Scenname=c[[2]];
		NewList={};
		];
If[Length[c]==12,
	result=Append[result,{Scenname,NewList}];
	Scenname=c[[1]];
	NewList={};
		];
If[Length[c]==5,NewList=Append[NewList,{c[[1]],c[[2]],ToExpression[c[[5]]]}]
		];
];
result=Append[result,{Scenname,NewList}];
Close[a];
result]


Distribution[lst_,asset_,date_]:=Module[{i},Table[Select[lst[[i,2]],((#[[1]]==asset)&&(#[[2]]==date))&][[1,3]],{i,1,Length[lst]}]]



