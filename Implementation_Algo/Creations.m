(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



AddClass[name_]:=Module[{symb},
symb=UniqueClass[];
CLName[symb]=name;
CLInstanceList[symb]={};
CLAttributeList[symb]={};
symb]


UniqueClass[]:=ClassNb+=1


AddAttribute[classname_,attname_,opts___]:=Module[{symb,class,ask,legv,atttype,initvalue},
	ask=question /.{opts} /. Options[AddAttribute];
	legv=legalvalues /.{opts} /. Options[AddAttribute];
	atttype=type /.{opts} /. Options[AddAttribute];
	initvalue=initialvalue /.{opts} /. Options[AddAttribute];
class=LookUpClass[classname];
symb=UniqueAttribute[];
ATTClass[symb]=class;
ATTName[symb]=attname;
ATTQuestion[symb]=ask;
ATTLegalValues[symb]=legv;
ATTType[symb]=atttype;
ATTInitialValue[symb]=initvalue;
ATTRules[symb]={};
CLAttributeList[class]=Append[CLAttributeList[class],symb];
symb]


Options[AddAttribute]={question->0,legalvalues->0,type->"String",initialvalue->"$$NoInitialValue"};


UniqueAttribute[]:=AttributeNb+=1


LookUpClass[classname_]:=Module[{ll=Select[Range[ClassNb],(CLName[#]==classname)&]},
If[Length[ll]==0,Print["LookUpClass; Non existent class: ",classname];Abort[]];
If[Length[ll]>1,Print["LookUpClass; more than one class called : ",classname];Abort[]];
ll[[1]]]


LookUpAttribute[attname_]:=Module[{ll=Select[Range[AttributeNb],(ATTName[#]==attname)&]},
If[Length[ll]==0,Print["LookUpAttribute: Non existent attribute: ",attname];Abort[]];
If[Length[ll]>1,Print["LookUpAttribute: more than one attribute called : ",attname];Abort[]];
ll[[1]]]


AddBackwardRule[rulename_,premisse_,conclusion_,concludedatt_,classname_]:=Module[{symb,att=LookUpAttribute[concludedatt],varatt},
	symb=UniqueBackwardRule[];
	BRPremisse[symb]=HoldForm[premisse];
BRConclusion[symb]=HoldForm[conclusion];
varatt=DeterminePremisseVarAttributeList[HoldForm[premisse]];
BRPremisseAttributeList[symb]=varatt[[2]];
BRPremisseInstanceList[symb]=varatt[[1]];
BRConcludedAttribute[symb]=att;
BRClass[symb]=classname;
ATTRules[att]=Append[ATTRules[att],symb];
BRName[symb]=rulename;]


DeterminePremisseVarAttributeList[premisse_]:=Module[{pos1},
pos1=Position[premisse,Unevaluated[V[_,_]]];
pos2=Position[premisse,Unevaluated[Known[_,_]]];
table1=Table[{Extract[premisse,pos1[[i]],Hold][[1,1]],Extract[premisse,pos1[[i]],Hold][[1,2]]},{i,1,Length[pos1]}];
table2=Table[{Extract[premisse,pos2[[i]],Hold][[1,1]],Extract[premisse,pos2[[i]],Hold][[1,2]]},{i,1,Length[pos2]}];
Transpose[Union[table1,table2]]
	]


SetAttributes[AddBackwardRule,HoldAll]


UniqueBackwardRule[]:=BackwardRuleNb+=1


AddInstance[classname_,opts___]:=Module[{symb,class,initial},
initial=initialvalues /.{opts} /. Options[AddInstance];
If[Length[initial]>0,If[Length[initial[[1]]]==0,initial={initial}]];
class=LookUpClass[classname];
symb=UniqueInstance[];
INSClass[symb]=class;
CLInstanceList[class]=Append[CLInstanceList[class],symb];
Map[AddInstanciedAttribute[class,symb,#]&,CLAttributeList[class]];
Map[(Module[
{insatt=InstanceAttributeValue[symb,LookUpAttribute[#[[1]]]]},
IAConcluded[insatt]=True;
IAConcludedValue[insatt]=#[[2]]])&,
initial];
symb]


Options[AddInstance]={initialvalues->{}};


UniqueInstance[]:=InstanceNb+=1


AddInstanciedAttribute[class_,instance_,att_]:=Module[{symb},
	symb=UniqueInstanciedAttribute[];
	IAInstance[symb]=instance;
	IAClass[symb]=class;
	IAAttribute[symb]=att;
	InstanceAttributeValue[instance,att]=symb;
	IAConcluded[symb]=False;
	IARuleThatConcluded[symb]=0;
	IAConcludedByBackchaining[symb]=False;
	IAConcludedByQuestion[symb]=False;
	IAConcludedDirectly[symb]=False;
	IAConcludedValue[symb]=0;
	IASucceededRuleEvent[symb]=0;
	IATriedRules[symb]={};
	If[ATTInitialValue[att]!= "$$NoInitialValue",
	  IAConcluded[symb]=True;
	  IAConcludedValue[symb]=ATTInitialValue[att]];symb]


UniqueInstanciedAttribute[]:=InstanciedAttributeNb+=1


AddSucceededRuleEvent[rule_, instance_,att_,concltype_]:=Module[{symb},
	symb=UniqueSucceededRuleEvent[];
	SREAttribute[symb]=att;
	SREConclusionType[symb]=concltype;
	SREInstance[symb]=instance;
	SRERule[symb]=rule;
symb]


UniqueSucceededRuleEvent[]:=SucceededRuleEventNb+=1


NewKb[]:=Module[{},ClassNb=0;InstanceNb=0;AttributeNb=0;InstanciedAttributeNb=0;BackwardRuleNb=0;SucceededRuleEventNb=0;
Clear[CLName,CLInstanceList,CLAttributeList];
Clear[ATTClass,ATTName,ATTQuestion,ATTLegalValues,ATTType,ATTInitialValue,ATTRules];
Clear[BRPremisse,BRConclusion,BRClass,BRName,BRConcludedAttribute,BRPremisseAttributeList,BRPremisseInstanceList];
Clear[INSClass,INSInstanceList];
Clear[IAInstance,IAClass,IAAttribute,InstanceAttributeValue,IAConcluded,IARuleThatConcluded,IAConcludedByBackchaining,IAConcludedByQuestion,IAConcludedDirectly,IAConcludedValue,IASucceededRuleEvent,IATriedRules];
Clear[SREInstance,SRERule,SREAttribute,SREConclusionType];
Clear[InstanceAttributeValue]]
