(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



SetDirectory["/Users/oliviercroissant/Documents/Math/ExpertSystem/NewExpertSystem"];
<<"Creations.m";<<"InferenceEngine.m";<<"DisplayFunctions.m";<<"Why.m";
<<"ScenariosCreation.m";
<<"TreeGeneration.m";
<<"Statistics`DescriptiveStatistics`";
(<<"ErrorBarPlots`";<<"PlotLegends`");


OneTimeStep[MeanRevertingNormalProcess[target_,speed_,Covmatrix_],timestep_]:=
Module[{i,j,n=Length[target] ,M,A},
M=Table[Covmatrix[[i,j]](1-Exp[-speed[[i]] timestep-speed[[j]] timestep])/(speed[[i]]+speed[[j]]),{i,1,n},{j,1,n}];
Print["M=",M];
A=CholeskyDecomposition[M];
Print["A=",A];
Function[{x0,increment},Module[{i,n=Length[x0] },Table[x0[[i]] Exp[-speed[[i]]timestep] +target[[i]] (1-Exp[-speed[[i]]timestep]),{i,1,n}]+A.increment ]]
]


OneTimeStep[ExpTiltedMeanRevertingNormalProcess[target_,speed_,Covmatrix_,Tiltmatrix_],timestep_]:=
Module[{i,j,n=Length[target] ,M,A,Bm1},
M=Table[Covmatrix[[i,j]](1-Exp[-speed[[i]] timestep-speed[[j]] timestep])/(speed[[i]]+speed[[j]]),{i,1,n},{j,1,n}];
Print["M=",M];
A=CholeskyDecomposition[M];
Print["A=",A];
Bm1=Inverse[Tiltmatrix];
Function[{y0,increment},Module[{i,n=Length[y0],x0 },x0=Bm1.Log[y0];Exp[Tiltmatrix.(Table[x0[[i]] Exp[-speed[[i]]timestep] +target[[i]] (1-Exp[-speed[[i]]timestep]),{i,1,n}]+A.increment) ]]]
]


NormalIncrements[n_]:=RandomArray[NormalDistribution[0,1],n]


ExportGenDomain[TimeSteps_,IncrementList_]:=Module[{i,str,filename},
filename="GenDomain.dat";
str="Object:\nTyp: GLConstGen\nTIMES: ";
Do[str=str<>ToString[TimeSteps[[i]]];
If[i<Length[TimeSteps],str=str<>" ",str=str<>"\n"],{i,1,Length[TimeSteps]}];
str=str<>"VALS: ";
Do[str=str<>ToString[IncrementList[[i]]];
If[i<Length[IncrementList],str=str<>" ",str=str<>"\n"],{i,1,Length[IncrementList]}];
Print["..............exporting "<>filename<>"\n",str];
Export[filename,str,"Text"]]


ExportTrDomain[dim_,state_,mean_,target_,matrix_,tiltmatrix_]:=Module[{i,j,str,filename},
filename="TrDomain.dat";
str="Object:\nType: GLRangeAcc\nRF ID: 1\nSTART: 0\nDIM: "<>ToString[dim]<>"\n\n";
str=str<>"Object:\nRF ID: 10\nUND ID: 1\nType: ExpLinExactOUFromIncrScMdl\nState : ";
Do[str=str<>ToString[state[[i]]];
If[i<Length[state],str=str<>" ",str=str<>"\n"],{i,1,Length[state]}];
str=str<>"Mean: ";
Do[str=str<>ToString[mean[[i]]];
If[i<Length[mean],str=str<>" ",str=str<>"\n"],{i,1,Length[mean]}];
str=str<>"Target: ";
    Do[str=str<>ToString[target[[i]]];
If[i<Length[target],str=str<>" ",str=str<>"\n"],{i,1,Length[target]}];
str=str<>"Matrix: "<>ToString[Length[matrix]]<>"x"<>ToString[Length[matrix[[1]]]]<>" [";
    Do[str=str<>ToString[matrix[[i,j]]];
If[(i<Length[matrix])||(j<Length[matrix[[1]]]),str=str<>" ",str=str<>"]\n"],{i,1,Length[matrix]},{j,1,Length[matrix[[1]]]}];
str=str<>"Tilt Matrix: "<>ToString[Length[tiltmatrix]]<>"x"<>ToString[Length[tiltmatrix[[1]]]]<>" [";
    Do[str=str<>ToString[tiltmatrix[[i,j]]];
If[(i<Length[tiltmatrix])||(j<Length[tiltmatrix[[1]]]),str=str<>" ",str=str<>"]\n"],{i,1,Length[tiltmatrix]},{j,1,Length[tiltmatrix[[1]]]}];
Print["..............exporting "<>filename<>"\n",str];
Export[filename,str,"Text"]]



