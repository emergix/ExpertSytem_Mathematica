(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



DirectorySave=Directory[];
SetDirectory["C:\\Users\\ocroissant\\Documents\\Desk_EDA23\\ExpertSystemEDA23\\PayOffConstruction\\Base"];
Get["Creations.m"];
Get["InferenceEngine.m"];
Get["DisplayFunctions.m"];
Get["Why.m"];
SetDirectory[DirectorySave];


NewKb[];
AddClass["Consultation"];


AddAttribute["Consultation","Main"];
AddAttribute["Consultation","Sophis PayOff"];
AddAttribute["Consultation","Want create a PayOff File",question->"Do you want to create a PayOff file ?",
		legalvalues->{"Yes","No"}];
AddAttribute["Consultation","PayOff Descriptor"];
AddAttribute["Consultation","PayOff File Name",question->"What is the Name of the PayOff File ?",initialvalue->"OutPayOff.CSV"];


AddAttribute["Consultation","Clause/Min"];
AddAttribute["Consultation","Clause/Max"];
AddAttribute["Consultation","Clause/Gearing"];
AddAttribute["Consultation","Clause/Cloture"];
AddAttribute["Consultation","Clause/GearingHyb"];
AddAttribute["Consultation","PayOff Type",legalvalues->{"NoSwap_Autocall_CMSTrigger","AutoCall_CMS_InArrear_FinalPDI"}];
AddAttribute["Consultation","Coupon Type",question->"What is the Coupon Type ?",legalvalues->{"CMS avec Barriere"}];
AddAttribute["Consultation","Payment Currency",question->"What is the Payment Currency ?",
	legalvalues->{"USD","PTE","FRF","DKK","DEM","CHF","BEF","SEK","NLG","ESP","NZD","HKD","GBP","CAD","AUD","FIM","ITL","XEU"}];


AddAttribute["Consultation","Number of coupons",question->"Number of Coupons ?"];
AddAttribute["Consultation","Periods between coupons",question->"Periods between coupons ?"];
AddAttribute["Consultation","Starting Date",question->"Starting Date ?"];
AddAttribute["Consultation","Coupon Date List"];


AddAttribute["Consultation","Clause Name List"];
AddAttribute["Consultation","Clause Matrix"];
AddAttribute["Consultation","Clause List"];


AddBackwardRule["Main determination 1",
		  (Known[CurrentInstance,"Clause List"])&& (Known[CurrentInstance,"PayOff Type"])&&
		(V[CurrentInstance,"Want create a PayOff File"]=="Yes"),
	PayOffDescriptor[V[CurrentInstance,"Want create a PayOff File"],V[CurrentInstance,"PayOff File Name"],V[CurrentInstance,"Clause Name List"],V[CurrentInstance,"Clause Matrix"],V[CurrentInstance,"PayOff Type"]];"Done",
	"Main","Consultation"];



AddBackwardRule["Main determination 2",
		  (Known[CurrentInstance,"Clause List"])&& (Known[CurrentInstance,"PayOff Type"])&&
		(V[CurrentInstance,"Want create a PayOff File"]=="No"),
	"Good Bye",
	"Main","Consultation"];



PayOffDescriptor[flag_,filename_,ClauseNameList_,ClauseMatrix_,payoff_]:=Module[{records,nbclause=Length[ClauseNameList],nbdate=Length[ClauseMatrix],str="",i,j},
If[flag=="Yes",
str=ClauseNameList[[1]];
Do[str=str<>","<>ClauseNameList[[j]],{j,2,nbclause}];
Do[str=str<>"\n";
str=str<>ClauseMatrix[[i,1]];
Do[str=str<>","<>ClauseMatrix[[i,j]],{j,2,nbclause}];
,{i,1,nbdate}];
Print["exporting \n",str];
Export[filename,str,"Text"]]]


AddBackwardRule["Rule Clause Date Generation",
(V[CurrentInstance,"Coupon Type"]=="CMS avec Barriere")&&
	(Known[CurrentInstance,"Number of coupons"])&&
	(Known[CurrentInstance,"Periods between coupons"])&&
	(Known[CurrentInstance,"Starting Date"]),
Map[(V[CurrentInstance,"Starting Date"])&,Range[ToNumber[V[CurrentInstance,"Number of coupons"]]]],
"Coupon Date List","Consultation"];


AddAttribute["Consultation","BarrierDown",question->"BarrierDown ?"];
AddAttribute["Consultation","BarrierUp",question->"BarrierUp ?"];
AddAttribute["Consultation","Spread",question->"Spread ?"];


AddBackwardRule["Rule NoSwap_Autocall_CMSTrigger",
	(V[CurrentInstance,"Coupon Type"]=="CMS avec Barriere")&&
	(Known[CurrentInstance,"Coupon Date List"]),
Conclude[CurrentInstance,"PayOff Type","NoSwap_Autocall_CMSTrigger"];
Conclude[CurrentInstance,"Clause/Min",V[CurrentInstance,"BarrierDown"]];
Conclude[CurrentInstance,"Clause/Max",V[CurrentInstance,"BarrierUp"]];
Conclude[CurrentInstance,"Clause/Gearing",V[CurrentInstance,"Spread"]];
Conclude[CurrentInstance,"Clause Name List",{
"Payer",
"Min",
"Max",
"Gearing"
}];
Conclude[CurrentInstance,"Clause Matrix",Map[({
#,
ToString[V[CurrentInstance,"Clause/Min"]],
ToString[V[CurrentInstance,"Clause/Max"]],
ToString[V[CurrentInstance,"Clause/Gearing"]]
})&,V[CurrentInstance,"Coupon Date List"]]],
"Clause List","Consultation"];


AddAttribute["Consultation","AutoCall_CMS_InArrear_FinalPDI/BarrierDown",question->"BarrierDown ?"];
AddAttribute["Consultation","AutoCall_CMS_InArrear_FinalPDI/BarrierUp",question->"BarrierUp ?"];
AddAttribute["Consultation","AutoCall_CMS_InArrear_FinalPDI/SpreadCMS",question->"SpreadCMS ?"];
AddAttribute["Consultation","AutoCall_CMS_InArrear_FinalPDI/Fix Coupon",question->"Fix Coupon ?"];
AddAttribute["Consultation","AutoCall_CMS_InArrear_FinalPDI/Gearing",question->"Gearing ?"];


AddBackwardRule["Rule AutoCall_CMS_InArrear_FinalPDI",
	(V[CurrentInstance,"PayOff Type"]=="AutoCall_CMS_InArrear_FinalPDI")&&
	(Known[CurrentInstance,"Coupon Date List"]),
Conclude[CurrentInstance,"PayOff Type","AutoCall_CMS_InArrear_FinalPDI"];
Conclude[CurrentInstance,"Clause/Min",V[CurrentInstance,"AutoCall_CMS_InArrear_FinalPDI/BarrierDown"]];
Conclude[CurrentInstance,"Clause/Max",V[CurrentInstance,"AutoCall_CMS_InArrear_FinalPDI/BarrierUp"]];
Conclude[CurrentInstance,"Clause/Gearing",V[CurrentInstance,"AutoCall_CMS_InArrear_FinalPDI/SpreadCMS"]];
Conclude[CurrentInstance,"Clause/GearingHyb",V[CurrentInstance,"AutoCall_CMS_InArrear_FinalPDI/Fix Coupon"]];
Conclude[CurrentInstance,"Clause/Cloture",V[CurrentInstance,"AutoCall_CMS_InArrear_FinalPDI/Gearing"]];
Conclude[CurrentInstance,"Clause Name List",{
"Debut",
"Fin",
"ExCoupon",
"Payer",
"Min",
"Max",
"Gearing",
"Cloture"
}];
Conclude[CurrentInstance,"Clause Matrix",Map[({
#,#,#,#,
ToString[V[CurrentInstance,"Clause/Min"]],
ToString[V[CurrentInstance,"Clause/Max"]],
ToString[V[CurrentInstance,"Clause/Gearing"]],
ToString[V[CurrentInstance,"Clause/Cloture"]]
})&,V[CurrentInstance,"Coupon Date List"]]],
"Clause List","Consultation"];
